name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.out ./...
        env:
          DATABASE_URL: file:./data/test.db
          SESSION_SECRET: test-secret-key-for-ci-testing
          GITHUB_CLIENT_ID: test-client-id
          GITHUB_CLIENT_SECRET: test-client-secret
          GITHUB_REDIRECT_URL: http://localhost:8080/auth/callback
          GITHUB_REPO_OWNER: test-owner
          GITHUB_REPO_NAME: test-repo
          GITHUB_WEBHOOK_SECRET: test-webhook-secret

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.out

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-container:
    name: Test in Container
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test container startup
        run: |
          docker run -d \
            --name test-container \
            -p 8080:8080 \
            -e DATABASE_URL=file:/app/data/test.db \
            -e SESSION_SECRET=test-secret \
            -e GITHUB_CLIENT_ID=test-id \
            -e GITHUB_CLIENT_SECRET=test-secret \
            -e GITHUB_REDIRECT_URL=http://localhost:8080/auth/callback \
            -e GITHUB_REPO_OWNER=test \
            -e GITHUB_REPO_NAME=test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
          
          # Wait for container to be healthy
          timeout=30
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:8080/health 2>/dev/null; then
              echo "Container is healthy"
              break
            fi
            echo "Waiting for container to be healthy..."
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "Container failed to become healthy"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container